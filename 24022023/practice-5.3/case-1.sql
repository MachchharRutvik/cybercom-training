-- Write a SQL query to retrieve the names and salaries of all 
-- employees who have a salary greater than the average salary 
-- of all employees.
use practice5;
select employee_name from 
employees where salary>(select avg(salary) from employees);

--  Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order
select * from order_items;
select c.customer_name , sum(oi.quantity*p.unit_price) as revenue 
from customers c 
join orders o using(customer_id) 
join order_items oi using(order_id)
join products1 p using(product_id) 
group by customer_id order by revenue desc;

-- Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order, where the total revenue is 
-- greater than $10,000.

select * from order_items;
select c.customer_name , sum(oi.quantity*p.unit_price) as revenue 
from customers c 
join orders o using(customer_id) 
join order_items oi using(order_id)
join products1 p using(product_id) 
group by customer_id 
having revenue>10000
order by revenue desc;

--  Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order, where the total revenue is 
-- greater than the average revenue generated by all 
-- customers.

select c.customer_name , sum(oi.quantity*p.unit_price) as revenue 
from customers c 
join orders o using(customer_id) 
join order_items oi using(order_id)
join products1 p using(product_id) 
group by customer_id 
having revenue>(select avg(oi.quantity*p.unit_price) from order_items oi join products1 p using(product_id))
order by revenue desc;
	
-- . Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order, where the total revenue is 
-- greater than the average revenue generated by all 
-- customers, and the customer is from the "USA" or "Canada".

select c.customer_name , sum(oi.quantity*p.unit_price) as revenue 
from customers c 
join orders o using(customer_id) 
join order_items oi using(order_id)
join products1 p using(product_id)
where c.city in ('USA', 'Canada') 
group by customer_id 
having revenue>(select avg(oi.quantity*p.unit_price) from order_items oi join products1 p using(product_id))
order by revenue desc;

select * from customers;

-- Write a SQL query to retrieve the names of all employees 
-- who have made sales greater than $50,000 in the "orders" 
-- table.

select e.employee_name from employees e 
join orders o using(employee_id) 
join order_items oi using(order_id)
 join products1 p using(product_id) 
 join customers c using(customer_id)
 group by e.employee_id
 having sum(oi.quantity * p.unit_price)>50000;
 
-- write a SQL query to retrieve the names of all employees 
-- who have made sales greater than the average sales of all 
-- employees in the "orders" table, sorted by sales in 
-- descending order.

select e.employee_name from employees e 
join orders o using(employee_id) 
join order_items oi using(order_id) 
join products1 p using(product_id) 
group by e.employee_id 
having sum(oi.quantity * p.unit_price)>(
select avg(oi.quantity * p.unit_price)
 from order_items oi 
 join products1 p using(product_id))
 order by sum(oi.quantity * p.unit_price) desc ;
 
--   Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order, where the customer is from the 
-- "USA" and the revenue is greater than $5,000.

select c.customer_name , sum(oi.quantity * p.unit_price) from customers c
join orders o using(customer_id)
join order_items oi using(order_id)
join products1 p using(product_id)
where c.shipping_address = '%USA%' 
group by c.customer_id
having sum(oi.quantity * p.unit_price)>5000 
order by sum(oi.quantity * p.unit_price) desc ;

-- Write a SQL query to retrieve the names and total revenue 
-- generated by all customers in the "orders" table, sorted by 
-- revenue in descending order, where the customer is from the 
-- "USA" and the revenue is greater than the average revenue 
-- generated by all customers from the "USA".

select c.customer_name , sum(oi.quantity * p.unit_price) from customers c
join orders o using(customer_id)
join order_items oi using(order_id)
join products1 p using(product_id)
where c.shipping_address like '%USA%' 
group by c.customer_id
having sum(oi.quantity * p.unit_price)>(
select avg(oi.quantity * p.unit_price)
 from order_items oi 
 join products1 p using(product_id) )
order by sum(oi.quantity * p.unit_price) desc ;

-- Write a SQL query to retrieve the names and total 
-- revenue generated by all customers in the "orders" table, 
-- sorted by revenue in descending order, where the customer 
-- is from the "USA" and the revenue is greater than the 
-- average revenue generated by all customers, and the 
-- customer has made at least 2 orders.

select c.customer_name , sum(oi.quantity * p.unit_price) from customers c
join orders o using(customer_id)
join order_items oi using(order_id)
join products1 p using(product_id)
where c.shipping_address like '%USA%' and (select count(distinct customer_id) from orders) >=2  
group by c.customer_id
having sum(oi.quantity * p.unit_price)>(
select avg(oi.quantity * p.unit_price)
 from order_items oi 
 join products1 p using(product_id)) 
order by sum(oi.quantity * p.unit_price) desc ;

select * from orders;